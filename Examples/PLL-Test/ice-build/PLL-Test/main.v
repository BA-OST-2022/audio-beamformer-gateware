// Code generated by Icestudio 0.9.0

`default_nettype none

//---- Top entity
module main #(
 parameter vbc24f2 = 9,
 parameter v28b773 = 0,
 parameter vf9b2d0 = 0,
 parameter v7ff2ba = 10000,
 parameter v7b4dbd = 1000
) (
 input vclk,
 output v710585,
 output v5ad0da,
 output v484bba,
 output [0:6] vinit
);
 localparam p0 = v7ff2ba;
 localparam p1 = v7b4dbd;
 localparam p5 = vf9b2d0;
 localparam p6 = v28b773;
 localparam p7 = vbc24f2;
 wire w2;
 wire w3;
 wire w4;
 wire w8;
 wire w9;
 wire w10;
 assign v710585 = w3;
 assign v5ad0da = w8;
 assign v484bba = w9;
 assign w10 = vclk;
 assign w8 = w4;
 assign w9 = w2;
 main_v241bac #(
  .N(p0)
 ) v241bac (
  .clk_out(w2),
  .clk_in(w4)
 );
 main_va9f6d7 #(
  .N(p1)
 ) va9f6d7 (
  .clk_in(w2),
  .clk_out(w3)
 );
 ve2b7eb #(
  .v204bed(p5),
  .vecb3d5(p6),
  .ve58c06(p7)
 ) v0b335b (
  .v3ead5b(w4),
  .v328508(w10)
 );
 assign vinit = 7'b0000000;
endmodule

//---------------------------------------------------
//-- PLL40_CORE.example
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- An example using SB_PLL40_CORE primitive
//---------------------------------------------------
//---- Top entity
module ve2b7eb #(
 parameter ve58c06 = 0,
 parameter vecb3d5 = 79,
 parameter v204bed = 4,
 parameter vd29ea2 = 1,
 parameter v16d365 = "SIMPLE"
) (
 input v328508,
 output vdbfa46,
 output v3ead5b,
 output v333bf4
);
 localparam p0 = ve58c06;
 localparam p1 = vecb3d5;
 localparam p2 = v204bed;
 localparam p3 = vd29ea2;
 localparam p4 = v16d365;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 assign vdbfa46 = w7;
 assign v3ead5b = w8;
 assign v333bf4 = w9;
 assign w10 = v328508;
 vc83dcd va0dc84 (
  .v608bd9(w5)
 );
 vc4dd08 vda5929 (
  .v608bd9(w6)
 );
 ve2b7eb_vd4bd9d #(
  .DIVR(p0),
  .DIVF(p1),
  .DIVQ(p2),
  .FILTER_RANGE(p3),
  .FEEDBACK_PATH(p4)
 ) vd4bd9d (
  .RESETB(w5),
  .BYPASS(w6),
  .PLLOUTGLOBAL(w7),
  .PLLOUTCORE(w8),
  .LOCK(w9),
  .PACKAGEPIN(w10)
 );
endmodule

//---------------------------------------------------
//-- PLL40_PAD
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- SB_PLL40_PAD
//---------------------------------------------------

module ve2b7eb_vd4bd9d #(
 parameter DIVR = 0,
 parameter DIVF = 0,
 parameter DIVQ = 0,
 parameter FILTER_RANGE = 0,
 parameter FEEDBACK_PATH = 0
) (
 input PACKAGEPIN,
 input RESETB,
 input BYPASS,
 output PLLOUTGLOBAL,
 output PLLOUTCORE,
 output LOCK
);
 SB_PLL40_PAD #(
 		.FEEDBACK_PATH("SIMPLE"),
 		.DIVR(DIVR),		// DIVR =  0
 		.DIVF(DIVF),	// DIVF = 79
 		.DIVQ(DIVQ),		// DIVQ =  4
 		.FILTER_RANGE(FILTER_RANGE)	// FILTER_RANGE = 1
 	) uut (
 		.LOCK(LOCK),
 		.RESETB(RESETB),
 		.BYPASS(BYPASS),
 		.PACKAGEPIN(PACKAGEPIN),
 		.PLLOUTCORE(PLLOUTCORE),
 		.PLLOUTGLOBAL(PLLOUTGLOBAL)
 		);
endmodule
//---- Top entity
module vc83dcd (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 vc83dcd_v68c173 v68c173 (
  .v(w0)
 );
endmodule

//---------------------------------------------------
//-- Bit 1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Assign 1 to the output wire
//---------------------------------------------------

module vc83dcd_v68c173 (
 output v
);
 // Bit 1
 
 assign v = 1'b1;
endmodule
//---- Top entity
module vc4dd08 (
 output v608bd9
);
 wire w0;
 assign v608bd9 = w0;
 vc4dd08_v68c173 v68c173 (
  .v(w0)
 );
endmodule

//---------------------------------------------------
//-- Bit 0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Assign 0 to the output wire
//---------------------------------------------------

module vc4dd08_v68c173 (
 output v
);
 // Bit 0
 
 assign v = 1'b0;
endmodule

module main_v241bac #(
 parameter N = 0
) (
 input clk_in,
 output clk_out
);
 reg [15:0] counter;
 reg out = 1'b0;
 
 always @(posedge clk_in) begin
   counter <= counter + 1;
   if(counter == N / 2) begin
     counter <= 0;
     out <= ~out;
   end
 end
 
 assign clk_out = out;
endmodule

module main_va9f6d7 #(
 parameter N = 0
) (
 input clk_in,
 output clk_out
);
 reg [15:0] counter;
 reg out = 1'b0;
 
 always @(posedge clk_in) begin
   counter <= counter + 1;
   if(counter == N / 2) begin
     counter <= 0;
     out <= ~out;
   end
 end
 
 assign clk_out = out;
endmodule
